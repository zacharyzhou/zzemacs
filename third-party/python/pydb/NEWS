1.26
04-10-2009
* Add -d (debug debugger) option to ipython
* Add pdef command
* Allow a signal number in "info signals"
* Disassemble command improvements, such as disassembly 
  of frames
* Add "p" format specifier in "print" command
* Add a skip (statement) command

The above are all backports from pydbgr. 

* Doc fixes

1.25
12-25-2008
* Clean up debugger(). Add "status=continue".  
* list now works in the presense of zipped eggs
* Some small bug fixes and configuration bug fixes

1.24
12-10-2008
* "frame" (no arg) is "frame 0" like gdb

* Fix a bug starting ipython and running pydb.

* Catch exceptions raised in runcall()

* Revise tests for 2.6 and systems without readline

* Small doc and test changes. 

This may be the last release before a major rewrite.

1.23
5-30-2008

* Show parameters on call

* Some doc fixes.

* add ipython and python commands to go into an ipython or a python shell

* add "save" command to save the current breakpoints and/or 
  most settings to a file. (Suggested at a NYC Python group meeting.)

* add set/show "deftrace" to allow stopping at a def (method creation)
  statement.

* pseudo gdb-like "annotate" set/show commands and option.

* Better emacs interaction via above annotate

* bug when "info local" is run inside a "with" statement

  Fixes for last three items based patches by Alberto Griggio

1.22 2007-04-15

* Add function tracing and option -F.

* Call and return trace lines show nesting level. Return will show the
  value if it is a scalar or string type or return type otherwise.

* Make pydb.el work on Emacs 22 and 23. (was previously just 21).
  Better emacs tolerance on MS Windows.

* fix bug in "info thread" when threadframe is not installed (and
  python < 2.5).

* Better ipython interaction.

* pm distinquishes now where an exception rolled back to versus where
  the exception occurred.

* BSD Make tolerance

1.21 2007-02-13

* pydb script will do a path search to find a script, same as gdb.
  If compiled Python script is given, we try to find the non-compiled
  equivalent.

* 'help' command now allows an expression and runs Python's builtin help
  command (pydoc). Add pydoc command to call pydoc externally.

* Make prompt string detection in Emacs pydb-track more MS-friendly.
  Add a unit test for the Emacs interface.

* Allow lowercase signal names, e.g. "int" or "sigint" for "SIGINT".

* disassemble command allows for a start line and end line to limit
  disassembly, same as gdb. Due to these changes, we now require at least 
  Python 2.4.0.

* Allow limited expressions many places an int parameter is used in
  a debugger command

* Allow "info thread" always. That is we don't need --threading for this

* signal command's output more like gdb's.

* Add pydoc's help (i.e. python's built-in help) to debugger "help"
  command

* Add "set"/"show" option to force debugger output to be flushed on
  write.

* set/show "cmdtrace" is now "trace-commands" to match gdb 6.6.

* work-around a possible Python 2.5 bug manifested in pm/post_mortem where
  t.tb_frame.f_lineno != t.tb_lineno

* Experimental command completion. "complete" command now adds in local and
  global names on the first word

* Handle a quit when called via pydb.debugger(). Also experimental.

* We now print the line text and (and again the line number) when we stop.
  This is more helpful and more consistent with gdb and other debuggers.
  Note linetrace adds also (redundant) line number.

1.20 2006-12-10

* Turning on signal checking may slow things down too much. So off
  by default. Fix bug in "set sigcheck". Add --sigcheck option.

* Allow a thread number in "info thread" and "frame" commands if 
  Python 2.5 or threadframe.

* Show all threads even if we don't know their names.

* Allow Pdb object to get passed in runv(). Allows for better ipython
  invocation (%pydb) and may be useful in other shells as well

* Provide a clue when debugger "run" command given but no "file" has
  been set.

* Better shell-like argument parsing in the "run" command via
  shlex. 

* Recover more gracefully if a post-mortem is called and there is none.

* "set_trace" is now an alias for "debugger" which is probably a more
  natural name.

* We now tolerate back to Python version 2.3.3

* A number of small bugs fixed and document updates.

1.19 2006-10-27

* info threads: merge in terse display (Python 2.5, threadframe)
  and sort by thread name (Python 2.5)

* Add optional position argument on "continue" command.

* Add pydb.runl() and pydb.runv() forms to facilitate debugging a
  program from inside a Python shell.

* fix thread bugs: on startup with threading we stopped one statement
  too soon. more careful about storing into variables used in
  threading which are not locked (and so could be changed during a
  thread switch)

* Allow quit in thread debugging when MainThread is the only thread
  that we are in

* fix bugs in signal handling. 

* Add "stack" and "nostack" to list of things that can be done when
  a signal is received.

* things to make more ipython friendly.

* Improve pydb manual

1.18 2006-09-25

* Start thread debugging: 
    info thread [thread-name] [terse|verbose]    - show thread info
    qt                                     - quit current thread
    can set a breakpoint on a specific thread name.
  expand definitions of "frame" and "break" for threading

* GDB-like signal handling. Some code based on Matt Fleming's 2006
  Summer-of-Code project. Gdb's "handle" and "signal" commands.

* Add hard kill. May be needed for thread debugging.

* Fix bug in handling temporary breakpoints (tbreak) caused by the
  difference in semantics between pdb's 'clear' command and pdb's
  (which calls this 'delete' and has a different meaning for 'clear').

* 'examine' command now shows object's instance variables.

* add gdb 'FILE' command: allow loading/running a file from within
  pydb. (The old pydb from ddd had it too.)

1.17 2006-07-29
* Allow entry to the debugger without a script name.

* "examine" command output shows object attributes.
  There is a routine common to both examine and display.

* "whatis" shows doc strings if there is one.

* Fix a bug where we would get the wrong path in
  tracing through an "import x as y". This happened only if we invoked
  from a directory other than where the debugged program lives and we
  stepped into such an imported method. The fix is to save the the
  dirname of the script in the debugger instance variable.

* Fix bug when using set trace introduced in 1.16 in adding "command".

* Add gdb "directory" and "show directories" commands. 

* All "show" and "info" commands allow unique abbreviations in the
  subcommand name and in help. E.g. "show dir" for "show directories";
  "help dir" for "help directories".

* The "turn-on-pydbtrack" command turns removes py-pdbtrack from
  comint-output-filter-functions which was removing the cursor in the
  source window. Some small bugs removed from turn-on-pydbtrack.

* Tested on Python versions 2.3.4, 2.3.5, 2.4, 2.4.3, and 2.5.b1 on
  cygwin FreeBSD, GNU/Linux, NetBSD, OSX and Solaris.

* Add a subcommand class. Used in "set", "show", "info" (and possibly more
  down the line). As a result help output now more closely resembles
  gdb's. Thanks to Matt Fleming for finishing what I started.

* More fexible and more general output by no longer assuming we
  write to sys.stdout. Rather the output object is saved in the
  instance variable, which could be and often is the same as
  sys.stdout, but doesn't need to be. This change may make
  communication used in remote debugging and thread debugging
  simpler. Many thanks to Matt Fleming for the patch.

* Debugger options --output and --error no longer modify program's 
  stdout/stderr.

* --exec (-e) added allow debugger commands to be run on startup.
  Thanks to Matt Fleming

* post-mortem(), pm() and set-trace() interfaces changed. The dictionary 
  of assignements removed and instead a list of debugger commands has
  been added. 

* Document least-intrusion principle and changes listed above, list
  of files making up the debugger and changes above. Be more precise
  on the subtle differences in how the debugger is invoked.

* Remove pycheck errors; reduce pycheck warnings

* Changes have been made to facilitate addition of future features

1.16 2006-04-27

*  Add gdb "command" - run commands on a breakpoint. Code from current
   pdb sources, but we follow gdb more closely.

*  Allow one specify in the Pdb class Cmd's "completekey" binding.
   (Also in current pdb sources.)

*  Line tracing now shows source text.

*  Document how to turn on and off from program control. 

* "list" command is more like gdb's and can accept filename:lineo if
   that's all that's given (Suggestion from Matt Fleming). Was also
   off by one in line number listings.

*  Made pydb document corrections for the "source" command

*  Reword documentation on how set_trace() works based on confusion
   observed in comp.lang.python. Note speed implications of using this over 
   setting a breakpoint.

*  Note in Documentation that "jump" can be used to leave a loop. (Also
   based on a query in comp.lang.python)

*  Remove pdb backwards-compatibile runctx. This is a new debugger.

1.15
2006-03-25

* Add gdb history commands:
    set history ..., show history ..., show commands

* Add command completion (gdb: complete)

* Add log redirection (gdb: set logging, show logging)

* Add gdb directory commands: cd, pwd

* Add --cd invocation option 

* Add installation section in documentation

* reorder documentation so important stuff is towards the
  front. Small text corrections too.

* Add pyreadline as a configuration option.  

* Position location in file in GNU Emacs tracking in when in 
  comint shell: pydbtrack is a modified pdbtrack for Pydb. 

* Some single-letter command names for these reasons
  1. We now have command completion (often)
  2. If the letter isn't a command it can be used as a variable name
     in an assignment
  3. There is an alias mechanism that can be used
  4. Some of the commands like "j" for "jump" aren't used that much;
     or in the case of "cont" for "continue", there already was an 
     abbreviation "c". 
  5. Multiple names makes help and completion more awkward.

1.14
2006-02-28
* Fix bugs in configuration management. Make distcheck works again
  (sometimes)

1.13
2006-02-27

* Add MAN page (from Debian)
* Bump revision to 0.12 to 1.13 to be compatible with Debian pydb package.
* Improve set_trace(), post_mortem(), and pm()
* Document alternative invocation methods and how to call from a program.
* Break out cmds and bdb overrides into a separate module
* add optional count on "where"
* install in our own directory (e.g. site-packages/pydb)
  NOTE: REMOVE OLD PYDB INSTALLATIONS BEFORE INSTALLING THIS PYDB.
* As a result of the above add __init__.py to give package info.
* Don't rely on tabs settings. Remove all tabs in programs and use -t 
  to check that.
* Various bug fixes and documentation corrections

0.12
2006-02-21
* Add gdb commands: 
    - "cd" command
    - "display", "undisplay"
    - help subcommands for "show", "info", and "set"
    - info: "display", "line" "source" and "program"
    - "pwd" command
    - "return" (early exit from a function)
    - "shell" command
    - Extend "info line" to allow a function name.

* Use inspect module. Argument parameters and values are now shown.

* Break out debugger into more files 

* File location reporting changed. Is now like mdb, bashdb, or (or perldb)

* Changes to make more compatible with ddd.

* Doc fixes, add more GNU Emacs debugger commands

* "clear" command now accepts a function name

* Bugfixes:
  - allow debugged program to mangle sys.argv (we save our own copy)

0.11
2006-01-29

* Add regression tests! As a result more of the debugger has been
  tested and a number of bugs in pdb.py have been found and fixed.

* Add line tracing. Allow a delay in linetracing:
   "set linetrace delay *float*" (delay is useful in front-end GUIs)

* Add debugger command options:
    --batch        - don't run interactive commands on shell stops
    --trace (-x)   - non-interactive line tracing a la POSIX shells
    --output (-o)  - redirect stdout to a file 
    --error        - redirect stderr to a file
    --command      - run a debugger command script

* New debugger commands:
   disassemble          - disassemble python instructions
   source               - run a debugger script
   set basename         - show long/short filenames
   set linetrace        - line tracing
   set linetrace delay  - see above
   set cmdtrace         - show debugger script commands before running

* step/next can now take a count. E.g. step 2 or next 3.

* Show more accurate and useful location when we are stopped on an exec.

* Stack trace now reports exec positions a little bit better - 
  it doesn't call it a file.

* Emacs interface (pydb.el) updated for expanded commands

* set prompt allows embedded blanks and punctiation. Still have problems
  with trailing blanks.

* show with no parameters is like gdb: shows all subcommands.

* Class name back to Pdb to make interaction with other programs like 
  ipython more transparent. The *module* name is Pydb, so one must either
  "import pydb" or import "pdb" (stock debugger).

* Error message output made more uniform

* output routines can be subclassed

* Bugfixes:
  - __file__ is set before debugging script. (Bug in 2.4.2 pdb.py)

0.10
2006-01-12

First release of extended python debugger.

* Add gdb frame command

* Add gdb run (restart) command

* Add some "set"/"show" commands:
    args, listsize, version (no set here), dialect

* up/down can take a number of frames to move.

* Stepping skips over "def" statements.

* Document retval

* Add info commands ("args", "break", "line', "locals" and "source")

* Add examine command analogous to Perl's.

* up/down work like gdb's (when gdb dialect is in effect).
  Can supply an optional number of frames to go up/down.

* step/next skip over "def" commands.
