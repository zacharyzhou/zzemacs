#!@PYTHON@ -t
# $Id: test-tcp-connect.py.in,v 1.1 2007/11/01 09:20:32 rockyb Exp $ -*- Python -*-

# This unit test doesn't use any of the debugger code. It is meant solely
# to test the connection classes.

import os, sys, threading, time, unittest

top_builddir = "@top_builddir@"
if top_builddir[-1] != os.path.sep:
    top_builddir += os.path.sep
sys.path.insert(0, os.path.join(top_builddir, 'pydb'))
top_srcdir = "@top_srcdir@"
if top_srcdir[-1] != os.path.sep:
    top_srcdir += os.path.sep
sys.path.insert(0, os.path.join(top_srcdir, 'pydb'))

import connection

debug=True

class TestTCPConnections(unittest.TestCase):

    def setUp(self):
        self.port = 8000
        self.host = '127.0.0.1'
        self.server = connection.ConnectionServerTCP()
        self.client = connection.ConnectionClientTCP()

    def tear_Down(self):
        self.server.disconnect()
        self.client.disconnect()

    def repeated_connect(self, MAXTRIES=15):
        """Try to connect the client to self.addr either until we've
        tried MAXTRIES times or until it succeeds."""
        for i in range(MAXTRIES):
            if self.server._sock is None:
                time.sleep(0.01)
            else:
                for j in range(MAXTRIES):
                    try:
                        self.client.connect(self.addr)
                        if self.client.connected:
                            if debug:
                                print "client connected"
                            return True
                    except connection.ConnectionFailed, e:
                        if debug: print e
            
        if debug: print "Client can't connect"
        return False
        
    def server_listen(self, MAXPORTS=20):
        """Try to start the server listening over a range of ports
        starting with self.port"""
        self.addr = "%s:%d" % (self.host, self.port)
        for i in range(MAXPORTS):
            try:
                self.server.connect(self.addr)
                if debug: print "Listening on socket %s" % self.addr
                return True
            except connection.ConnectionFailed, e:
                if e[0] == 'Address already in use':
                    self.port += 1
                    print "Trying port %d" % self.port
                    self.addr = "%s:%d" % (self.host, self.port)
        if debug: print "No free port found"
        return False
                
    def setup_client_and_server(self):
        t=threading.Thread(target=self.server_listen)
        t.start()
        if not self.repeated_connect(): return False
        for i in range(15):
            if self.server._sock is not None and \
                   self.server.output is not None:
                return True
            time.sleep(0.01)

    def test_client_server(self):
        """Test that the we can read and write between a TCP client and
        server"""
        if not self.setup_client_and_server():
            self.server.disconnect()
            self.client.disconnect()
            return 
        self.server.write("good")
        line = self.client.readline()
        self.assertEqual("good", line, "Server write to client read bad")
        self.client.write('success')
        line = self.server.readline()
        self.assertEqual('success\n', line, 'Client write to server read bad')

    def test_disconnect_disconnected(self):
        """Test disconnecting twice """
        self.server.disconnect()
        self.server.disconnect()

    def test_invalid_address_port_pair(self):
        """Test an erroneous connection name"""
        addr = 'localhost 8000'
        self.assertRaises(connection.ConnectionFailed,
                          self.server.connect, addr)

    def test_invalid_server_address(self):
        """Test an erroneous server address"""
        addr = 'fff.209320909xcmnm2iu3-=0-0-z.,x.,091209:2990'
        self.assertRaises(connection.ConnectionFailed,
                          self.server.connect, addr)

if __name__ == '__main__':
    unittest.main()
